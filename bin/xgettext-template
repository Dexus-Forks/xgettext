#!/usr/bin/env node

var xgettext = require('..'),
  pkg = require('../package.json');

require('colors');

var argv = require('optimist')
  .usage([
    pkg.description,
    '',
    Object.keys(pkg.bin)[0] + ' [OPTION] [INPUTFILE]...'
  ].join('\n'))
  .alias({
    'D': 'directory',
    'o': 'output',
    'L': 'language',
    'k': 'keyword',
    'V': 'version'
  })
  .describe({
    'directory': 'add directory to list for input files search',
    'output': 'write output to specified file',
    'language': 'specifies the language of the input files',
    'from-code': 'encoding of input files',
    'keyword': 'additional keyword to be looked for',
    'force-po': 'write PO file even if empty',
    'no-location': 'don\'t write location information',
    'version': 'output version information and exit'
  })
  .default({
    'from-code': 'ascii',
    'keyword': ['_', 'gettext', 'ngettext:1,2'],
    'force-po': false,
    'no-location': false
  })
  .check(function (argv) {
      var equalsLanguage = function (ext) {
          return argv.language === xgettext.languages[ext];
        };

      if (argv.language && !Object.keys(xgettext.languages).some(equalsLanguage)) {
        throw ('Language \'' + argv.language + '\' is not supported.').red;
      }

      argv['from-code'] = argv['from-code'].toLowerCase().replace(/\W/g, '');

      if (['utf8', 'ascii', 'base64'].indexOf(argv['from-code']) < 0) {
        throw 'Encoding of input files must be either utf8, ascii or base64.'.red;
      }

      if (!argv._ && !argv['files-from'] && !argv.directory) {
        throw 'No input specified.'.red;
      }
    })
  .argv;

if (argv.version) {
  process.stdout.write(pkg.version + '\n');
  process.exit();
}

var input = argv._;
delete argv._;

var run = function (subject) {
    xgettext(subject, argv, function (po) {
        if (!argv.output && po) {
          process.stdout.write(po);
        }
      });
  };

if (input[0] === '-') {
  var stdin = process.stdin;

  input = '';

  stdin.setEncoding(argv['from-code']);
  stdin.on('data', function (chunk) {
        input += chunk;
      })
    .on('end', function () {
        run(input);
      });
} else {
  run(input);
}
